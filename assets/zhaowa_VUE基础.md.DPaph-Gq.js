import{_ as s,o as a,c as l,R as n}from"./chunks/framework.LBXiIpgL.js";const o="/assets/MVC.K-qmzrju.png",v=JSON.parse('{"title":"vue 第一部分","description":"","frontmatter":{},"headers":[],"relativePath":"zhaowa/VUE基础.md","filePath":"zhaowa/VUE基础.md"}'),p={name:"zhaowa/VUE基础.md"},e=n('<h1 id="vue-第一部分" tabindex="-1">vue 第一部分 <a class="header-anchor" href="#vue-第一部分" aria-label="Permalink to &quot;vue 第一部分&quot;">​</a></h1><h2 id="vue-基础" tabindex="-1">vue 基础 <a class="header-anchor" href="#vue-基础" aria-label="Permalink to &quot;vue 基础&quot;">​</a></h2><h2 id="面试题-1-简单聊一聊对于-mvvm-的理解" tabindex="-1">面试题 1：简单聊一聊对于 MVVM 的理解 <a class="header-anchor" href="#面试题-1-简单聊一聊对于-mvvm-的理解" aria-label="Permalink to &quot;面试题 1：简单聊一聊对于 MVVM 的理解&quot;">​</a></h2><blockquote><p>结合前端框架思想进化史和 vue 在写法上的实现进行回答</p></blockquote><h3 id="前端框架思想进化史" tabindex="-1">前端框架思想进化史 <a class="header-anchor" href="#前端框架思想进化史" aria-label="Permalink to &quot;前端框架思想进化史&quot;">​</a></h3><ul><li><strong>语义化模板</strong>： 根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和浏览器 SEO 优化</li><li><strong>MVC</strong>： model（底层的数据和属性） view（实际的页面） controller（事件监听及其回调等业务逻辑）=&gt; 手动实现对于 dom 的操作，事件监听等 <img src="'+o+`" data-fancybox="gallery"></li><li><strong>MVVM</strong> model view viewModel（视图和数据的绑定层） <ul><li>数据本身会绑定在 viewModel 层，并且会<em>自动</em>把数据渲染到页面中（自动更新），因此无需关心操作 controller，</li><li>并且在视图发生变化的时候也会通知 viewModel 层，不一定会主动更新</li></ul></li></ul><h3 id="vue-是如何利用-mvvm-思想进行项目开发的呢-组件间的事件和属性传递" tabindex="-1">vue 是如何利用 mvvm 思想进行项目开发的呢（组件间的事件和属性传递）？ <a class="header-anchor" href="#vue-是如何利用-mvvm-思想进行项目开发的呢-组件间的事件和属性传递" aria-label="Permalink to &quot;vue 是如何利用 mvvm 思想进行项目开发的呢（组件间的事件和属性传递）？&quot;">​</a></h3><ul><li><p><strong>数据双向绑定</strong></p><ol><li>利用花括号，构筑了数据与 vm 的绑定关系 =&gt; buildTemplate（vue2 早期是正则，vue2 后期和 vue3 是通过各种条件进行过滤的）</li><li>通过视图绑定事件来实现反向处理数据 =&gt; v-model === :value + @input =&gt; 子组件中通过 model 来更改</li></ol></li><li><p><strong>Q&amp;A</strong>:在 SFC 中各个部分该如何和 mvvm 进行一一对应呢?</p><ol><li>render 函数是 template 的下一级 =&gt; buildTemplate =&gt; render(); 会在加载的时候调用该函数，可以理解为 template 是 viewmodel 层</li><li>组件渲染出来的整体是 view 层，不只只是 dom</li><li>所有可以被 mergeOption 进行合并和传递的数据都属于 model(如 data，props 等)</li></ol></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// v-model的实现原理</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">myComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;"> &gt;&lt;/</span><span style="color:#79B8FF;">myComponent</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 这两个是等价的</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">myComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@input</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;handleInput&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">myComponent</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// v-model的实现原理</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">myComponent</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;"> &gt;&lt;/</span><span style="color:#005CC5;">myComponent</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 这两个是等价的</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">myComponent</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@input</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;handleInput&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">myComponent</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="vue-生命周期" tabindex="-1">vue 生命周期: <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;vue 生命周期:&quot;">​</a></h2><ol><li>创建阶段: beforeCreate =&gt; created =&gt; beforeMount =&gt; mounted</li><li>更新阶段： beforeUpdated =&gt; updated</li><li>销毁阶段： beforeDestroy =&gt; destroyed</li></ol><p><strong>beforeCreate</strong>: new Vue() - 实例创建阶段<br><strong>created</strong>：data| props | computed | method - 数据操作 =&gt; 不涉及 vdom（用数据或者对象来表示 dom）和 dom</p><p><strong>beforeMount</strong>：vdom - 数据操作可以进行了，但是不可以涉及 dom（vdom 已经组装完成，但是 dom 还没有更新）<br><strong>mounted</strong>： dom 阶段可以进行任何操作</p><p><strong>beforeUpdated</strong>:vdom 已经完成了更新，但是 dom 还没有更新（在次数进行数据操作）<br><strong>updated</strong>：dom 已经更新了 - 谨慎地更新数据操作（有可能会导致死循环）</p><p><strong>beforeDestroy</strong>：实例 vm 尚未被销毁 - 清空当前实例涉及的 eventbus， reset store ，清空计时器等<br><strong>destroyed</strong>：实例已经销毁 - 收尾工作</p><h2 id="vue-中的-监听-条件-循环" tabindex="-1">vue 中的 监听 | 条件 | 循环 <a class="header-anchor" href="#vue-中的-监听-条件-循环" aria-label="Permalink to &quot;vue 中的 监听 | 条件 | 循环&quot;">​</a></h2><h3 id="面试题-2-computed-和-watch-的区别和联系" tabindex="-1">面试题 2 ： computed 和 watch 的区别和联系 <a class="header-anchor" href="#面试题-2-computed-和-watch-的区别和联系" aria-label="Permalink to &quot;面试题 2 ： computed 和 watch 的区别和联系&quot;">​</a></h3><ul><li><p>同：</p><ul><li>都是基于 vue 的依赖收集机制(观察者模式)进行采集的</li><li>都是被依赖的变化所触发，进而进行改变和处理及计算</li></ul></li><li><p>不同：</p><ul><li>入和出： <ul><li>computed 是多入单出 - 多个值的变化组成了一个值的最终改变（更关注获得的结果）</li><li>watch 是单入多出 - 单个值的变化，进而影响一系列的变更（执行一系列的逻辑，更关注后续的流程）</li></ul></li><li>性能： <ul><li>computed：从缓存中读取计算值，计算值不变则不会重新计算</li><li>watch：监听值的变化一定会执行回调</li></ul></li><li>写法： <ul><li>computed：必须有返回值</li><li>watch：返回值有没有都可以</li></ul></li><li>时机： <ul><li>computed 从首次生成赋值就开始计算了</li><li>watch：除非设置 immediate 为 true，否则不会一打开就运行</li></ul></li></ul></li></ul><h3 id="内置指令-自定义指令" tabindex="-1">内置指令 &amp; 自定义指令 <a class="header-anchor" href="#内置指令-自定义指令" aria-label="Permalink to &quot;内置指令 &amp; 自定义指令&quot;">​</a></h3><h4 id="内置指令" tabindex="-1">内置指令 <a class="header-anchor" href="#内置指令" aria-label="Permalink to &quot;内置指令&quot;">​</a></h4><blockquote><p>v-model &amp; v-text &amp; v-html &amp; v-once &amp; v-bind &amp; v-on &amp; v-if &amp; v-show &amp; v-else &amp; v-else-if</p></blockquote><ul><li>v-text - 更新元素的文本内容</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-text</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">msg</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 等同于 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;{{msg}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-text</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">msg</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 等同于 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;{{msg}}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>v-html - 更新元素的 innerHTML（谨慎使用）</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 直接将html的内容作为HTML插入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-html</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">html</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 直接将html的内容作为HTML插入 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-html</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">html</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>v-once - 仅渲染元素和组件一次，并跳过之后的更新</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 单个元素 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-once</span><span style="color:#E1E4E8;">&gt;This will never change: {{msg}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 单个元素 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-once</span><span style="color:#24292E;">&gt;This will never change: {{msg}}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>v-on - 给元素绑定事件监听器(@)</li></ul><h5 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h5><ul><li><code>.stop</code> - 调用 event.stopPropagation()。阻止冒泡</li><li><code>.prevent</code> - 调用 event.preventDefault()。 阻止默认行为</li><li><code>.capture</code> - 在捕获模式添加事件监听器。（默认为冒泡阶段）</li><li><code>.self</code> - 只有事件从元素本身发出才触发处理函数。</li><li><code>.{keyAlias}</code> - 只在某些按键下触发处理函数。</li><li><code>.once</code> - 最多触发一次处理函数。</li><li><code>.left</code> - 只在鼠标左键事件触发处理函数。</li><li><code>.right</code> - 只在鼠标右键事件触发处理函数。</li><li><code>.middle</code> - 只在鼠标中键事件触发处理函数。</li><li><code>.passive</code> - 通过 { passive: true } 附加一个 DOM 事件。</li></ul><h4 id="面试题-v-for-v-if-优先级" tabindex="-1">面试题：v-for &amp; v-if 优先级： <a class="header-anchor" href="#面试题-v-for-v-if-优先级" aria-label="Permalink to &quot;面试题：v-for &amp; v-if 优先级：&quot;">​</a></h4><ul><li>在 vue2 中 v-for 的优先级大于 v-if</li><li>在 vue3 中 v-if 的优先级大于 v-for</li></ul><h4 id="面试题-v-if-v-show-区别" tabindex="-1">面试题 ： v-if | v-show 区别 <a class="header-anchor" href="#面试题-v-if-v-show-区别" aria-label="Permalink to &quot;面试题 ： v-if | v-show 区别&quot;">​</a></h4><ul><li>都可以操作 dom 的展示与否，区别在于是否节点 dom 实际存在</li></ul><h4 id="自定义指令" tabindex="-1">自定义指令 <a class="header-anchor" href="#自定义指令" aria-label="Permalink to &quot;自定义指令&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// v-zhaowa</span></span>
<span class="line"><span style="color:#B392F0;">directives</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">zhaowa</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// code here</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// v-zhaowa</span></span>
<span class="line"><span style="color:#6F42C1;">directives</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">zhaowa</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// code here</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="面试题-为什么-vue-要把事件设计在模板上而不是-js-中" tabindex="-1">面试题：为什么 vue 要把事件设计在模板上而不是 js 中？ <a class="header-anchor" href="#面试题-为什么-vue-要把事件设计在模板上而不是-js-中" aria-label="Permalink to &quot;面试题：为什么 vue 要把事件设计在模板上而不是 js 中？&quot;">​</a></h2><ol><li>模板和视图本身就是对应的，模板来对应视图，进而绑定触发源，同时触发源可以快速的寻找触发事件的逻辑，定位更加方便</li><li>js 与视图绑定解耦， - 更加便于测试隔离，js 中包含更多的是业务逻辑</li><li>vm 销毁会自动解绑事件 - 便于回收，无需在 js 中手动消除</li></ol><h2 id="面试题-watch-和-watcheffect-的区别" tabindex="-1">面试题： watch 和 watchEffect 的区别： <a class="header-anchor" href="#面试题-watch-和-watcheffect-的区别" aria-label="Permalink to &quot;面试题： watch 和 watchEffect 的区别：&quot;">​</a></h2><ol><li>前者运行的时候并不会执行，后者会</li><li>前者需要指定监听的属性，如果监听的属性层级很深的话需要使用 deep。而后者会直接将所有数据进行监听，而不需要进行具体的指定</li><li>前者可以访问到新旧两种值，后者只能访问到最新的值</li></ol><h2 id="面试题-npm-包依赖加载和本地文件的加载有什么区别" tabindex="-1">面试题：npm 包依赖加载和本地文件的加载有什么区别？ <a class="header-anchor" href="#面试题-npm-包依赖加载和本地文件的加载有什么区别" aria-label="Permalink to &quot;面试题：npm 包依赖加载和本地文件的加载有什么区别？&quot;">​</a></h2><ul><li>本质上是完全一样的，npm 其实就是一个依赖的注入</li></ul><blockquote><p>vue3 中没有 this 是因为是使用块作用域进行隔离的，所以无需 this</p></blockquote><h2 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h2><h4 id="一般组件-动态组件" tabindex="-1">一般组件 + 动态组件 <a class="header-anchor" href="#一般组件-动态组件" aria-label="Permalink to &quot;一般组件 + 动态组件&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">a-component</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">a-component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a-component</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">a-component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="迷惑面试题" tabindex="-1">迷惑面试题 <a class="header-anchor" href="#迷惑面试题" aria-label="Permalink to &quot;迷惑面试题&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 迷惑</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a:&quot;</span><span style="color:#E1E4E8;">, a, </span><span style="color:#9ECBFF;">&quot;window.a:&quot;</span><span style="color:#E1E4E8;">, window.a); </span><span style="color:#6A737D;">// 5 undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b:&quot;</span><span style="color:#E1E4E8;">, b, </span><span style="color:#9ECBFF;">&quot;window.b:&quot;</span><span style="color:#E1E4E8;">, window.b);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {} </span><span style="color:#6A737D;">//影响点</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a:&quot;</span><span style="color:#E1E4E8;">, a, </span><span style="color:#9ECBFF;">&quot;window.a:&quot;</span><span style="color:#E1E4E8;">, window.a); </span><span style="color:#6A737D;">// 5 5</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 为什么在这个时刻 window.a 被赋值了</span></span>
<span class="line"><span style="color:#E1E4E8;">  a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a:&quot;</span><span style="color:#E1E4E8;">, a, </span><span style="color:#9ECBFF;">&quot;window.a:&quot;</span><span style="color:#E1E4E8;">, window.a);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a:&quot;</span><span style="color:#E1E4E8;">, a);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b:&quot;</span><span style="color:#E1E4E8;">, b);</span></span>
<span class="line"><span style="color:#6A737D;">// 分析：是因为变量提升window.a的变化是undefined =&gt; function =&gt; 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 迷惑</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a:&quot;</span><span style="color:#24292E;">, a, </span><span style="color:#032F62;">&quot;window.a:&quot;</span><span style="color:#24292E;">, window.a); </span><span style="color:#6A737D;">// 5 undefined</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b:&quot;</span><span style="color:#24292E;">, b, </span><span style="color:#032F62;">&quot;window.b:&quot;</span><span style="color:#24292E;">, window.b);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">() {} </span><span style="color:#6A737D;">//影响点</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a:&quot;</span><span style="color:#24292E;">, a, </span><span style="color:#032F62;">&quot;window.a:&quot;</span><span style="color:#24292E;">, window.a); </span><span style="color:#6A737D;">// 5 5</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 为什么在这个时刻 window.a 被赋值了</span></span>
<span class="line"><span style="color:#24292E;">  a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a:&quot;</span><span style="color:#24292E;">, a, </span><span style="color:#032F62;">&quot;window.a:&quot;</span><span style="color:#24292E;">, window.a);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a:&quot;</span><span style="color:#24292E;">, a);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b:&quot;</span><span style="color:#24292E;">, b);</span></span>
<span class="line"><span style="color:#6A737D;">// 分析：是因为变量提升window.a的变化是undefined =&gt; function =&gt; 5</span></span></code></pre></div><h3 id="团队使用-vue-的优缺点" tabindex="-1">团队使用 vue 的优缺点 <a class="header-anchor" href="#团队使用-vue-的优缺点" aria-label="Permalink to &quot;团队使用 vue 的优缺点&quot;">​</a></h3><ul><li><p>优点：在 Vue 中，组件支持同事拥有模板、逻辑和样式，使得组件具有高度的灵活性和可维护性，这使得团队合作更加高效，也降低了应用程序的维护成本。</p></li><li><p>缺点：不够标准化，Vue 没有强制遵循一种特定的编码风格或者架构模式，这可能导致不同的开发者或团队之间的代码风格不一致，增加维护成本。</p></li></ul>`,50),t=[e];function c(r,i,E,y,d,u){return a(),l("div",null,t)}const m=s(p,[["render",c]]);export{v as __pageData,m as default};
