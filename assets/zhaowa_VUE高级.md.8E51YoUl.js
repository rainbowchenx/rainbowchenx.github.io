import{_ as s,o as n,c as a,R as l}from"./chunks/framework.LBXiIpgL.js";const g=JSON.parse('{"title":"VUE 高级","description":"","frontmatter":{},"headers":[],"relativePath":"zhaowa/VUE高级.md","filePath":"zhaowa/VUE高级.md"}'),p={name:"zhaowa/VUE高级.md"},o=l(`<h1 id="vue-高级" tabindex="-1">VUE 高级 <a class="header-anchor" href="#vue-高级" aria-label="Permalink to &quot;VUE 高级&quot;">​</a></h1><h3 id="特征一-模板化-vue-template-complier" tabindex="-1">特征一：模板化 =&gt; vue-template-complier <a class="header-anchor" href="#特征一-模板化-vue-template-complier" aria-label="Permalink to &quot;特征一：模板化 =&gt; vue-template-complier&quot;">​</a></h3><h4 id="slot-插槽-模板动态化" tabindex="-1">slot 插槽 - 模板动态化 <a class="header-anchor" href="#slot-插槽-模板动态化" aria-label="Permalink to &quot;slot 插槽 - 模板动态化&quot;">​</a></h4><ul><li><p>默认插槽： 组件外部维护参数和结构，内部安排位置的摆放</p><ul><li>父组件传递的内容会默认传递给子组件中的 slot 位置</li><li><strong>面试题</strong>=&gt; 默认插槽的实现方式？插槽的聚合（多个插槽）会合并单个节点渲染到 slot 对应的位置</li></ul></li><li><p>具名插槽：以 name 来表示当前插槽的身份，从而在组件内部做到可区分</p><ul><li><strong>面试题</strong>： name 仅仅是索引 =&gt; 节点是独立生成的（就是子组件中只会有父组件中 template 的内容，不会有额外的结构）</li><li>追问：剧名插槽中的混合传参，即外部做结构的勾勒描述，内部做参数的混合 - 作用域插槽</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 父组件中</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-slot</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">&gt;{{ header }}&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-slot</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">&gt;{{ footer }}&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件中</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">/* 代码中的某一位置 */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;footer&#39;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">/* 代码中另一个位置 */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;header&#39;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 父组件中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">&gt;{{ header }}&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">footer</span><span style="color:#24292E;">&gt;{{ footer }}&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 子组件中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6A737D;">/* 代码中的某一位置 */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;footer&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6A737D;">/* 代码中另一个位置 */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;header&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li><li><p>作用域插槽：父来决定插槽的结构，子来决定插槽的内容</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">Hello</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;template slot=&quot;slotContent&quot; slot-scope=&quot;{slotProps}&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ slotProps }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/template&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">Hello</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 子组件中,slotProps是子组件中的数据，可以以这种方式将子组件中的数据传到父组件中 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slotContent&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">slotProps</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">slotProps</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{{slotProps}}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">Hello</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;template slot=&quot;slotContent&quot; slot-scope=&quot;{slotProps}&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ slotProps }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/template&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">Hello</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 子组件中,slotProps是子组件中的数据，可以以这种方式将子组件中的数据传到父组件中 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;slotContent&quot;</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">slotProps</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">slotProps</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{{slotProps}}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><h4 id="模板二次加工" tabindex="-1">模板二次加工 <a class="header-anchor" href="#模板二次加工" aria-label="Permalink to &quot;模板二次加工&quot;">​</a></h4><ol><li><p>watch | computed =&gt; 配置或者 hook 里面去写</p></li><li><p>过滤器：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ money | moneyFilter }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      money: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  filters: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">moneyFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">money</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> money </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> money;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ money | moneyFilter }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      money: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  filters: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">moneyFilter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">money</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> money </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> money;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li><strong>面试题</strong>： filter 上可以通过 this 获得组件实例吗？- 不可以，功能只是针对传入参数的逻辑处理,防止对外界变量等进行污染,this 进行了隔离</li><li><strong>面试题</strong>： filter 和 computed 的区别？ - filter 仅仅对当前传入参数的变化，后者是针对多个值进行变化 3.v-html：结构化渲染的方式 v-text 和 v-html：前者是简单文本的渲染，后者是以结构化 html 形式进行展示</li></ul></li><li><p>v-html</p></li></ol><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-html</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">money </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;p&gt;99&lt;/p&gt;\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> money</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-html</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">money </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;p&gt;99&lt;/p&gt;\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> money</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>面试题： v-html 的安全性 =&gt; 随意使用会导致 xss 攻击 =&gt; iframe sandbox(有独立运行态，结果经过 sandbox 传出，仅限 js 逻辑，html 逻辑) =&gt; 在 v-html 下写结构或者内容会被覆盖掉</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &lt;p&gt;&quot;ss&quot;&lt;/p&gt;会被覆盖掉，写了没用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-html</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">money </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;p&gt;99&lt;/p&gt;\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> money</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;p&gt;&quot;ss&quot;&lt;/p&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- &lt;p&gt;&quot;ss&quot;&lt;/p&gt;会被覆盖掉，写了没用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-html</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">money </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;p&gt;99&lt;/p&gt;\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> money</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;p&gt;&quot;ss&quot;&lt;/p&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="jsx-更自由的-all-in-js" tabindex="-1">jsx 更自由的 all in js <a class="header-anchor" href="#jsx-更自由的-all-in-js" aria-label="Permalink to &quot;jsx 更自由的 all in js&quot;">​</a></h4><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            money:</span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">            options:[{</span></span>
<span class="line"><span style="color:#E1E4E8;">                value:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">            },{</span></span>
<span class="line"><span style="color:#E1E4E8;">                value:</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">            }]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }，</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">handleClick</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 实现v-for</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moneyNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.money}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((item)</span><span style="color:#F97583;">=-&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(this.money === 100){</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                        &lt;</span><span style="color:#85E89D;">content</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {item}</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {item.value}</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleClick}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                            {moneyNode}</span></span>
<span class="line"><span style="color:#E1E4E8;">                        &lt;/</span><span style="color:#85E89D;">content</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    )</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            money:</span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">            options:[{</span></span>
<span class="line"><span style="color:#24292E;">                value:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">            },{</span></span>
<span class="line"><span style="color:#24292E;">                value:</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">            }]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }，</span></span>
<span class="line"><span style="color:#24292E;">    methods:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">handleClick</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 实现v-for</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">h</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moneyNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.money}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((item)</span><span style="color:#D73A49;">=-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(this.money === 100){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                        &lt;</span><span style="color:#22863A;">content</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {item}</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {item.value}</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">onClick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleClick}&gt;</span></span>
<span class="line"><span style="color:#24292E;">                            {moneyNode}</span></span>
<span class="line"><span style="color:#24292E;">                        &lt;/</span><span style="color:#22863A;">content</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                    )</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="面试题-如何在-jsx-中实现-vue-中的内置指令-map" tabindex="-1">面试题： 如何在 jsx 中实现 vue 中的内置指令? map <a class="header-anchor" href="#面试题-如何在-jsx-中实现-vue-中的内置指令-map" aria-label="Permalink to &quot;面试题： 如何在 jsx 中实现 vue 中的内置指令? map&quot;">​</a></h4><h4 id="面试题-jsx-的优缺点" tabindex="-1">面试题：jsx 的优缺点 <a class="header-anchor" href="#面试题-jsx-的优缺点" aria-label="Permalink to &quot;面试题：jsx 的优缺点&quot;">​</a></h4><ul><li>优点：更加自由，更加符合 js 的书写习惯和方式</li><li>劣势：无法使用 vue 的指令，无法使用 vue 的性能优化策略(因为从 template 到 render 是做了很多优化的，直接用 render 是没有性能优化的,如 diff)</li></ul><p>插槽中的内容是什么时候渲染的？子组件渲染的时候进行渲染 v-slot 和 slot</p><h2 id="特征二-组件化-实质上就是对象的编写" tabindex="-1">特征二： 组件化(实质上就是对象的编写) <a class="header-anchor" href="#特征二-组件化-实质上就是对象的编写" aria-label="Permalink to &quot;特征二： 组件化(实质上就是对象的编写)&quot;">​</a></h2><ul><li>抽象进行复用</li><li>精简 &amp; 聚合</li></ul><h3 id="mixin-逻辑混入-注入-数组形式" tabindex="-1">mixin - 逻辑混入（注入），数组形式 <a class="header-anchor" href="#mixin-逻辑混入-注入-数组形式" aria-label="Permalink to &quot;mixin - 逻辑混入（注入），数组形式&quot;">​</a></h3><ol><li>应用： 逻辑相同，模板不同的情况下使用 mixin,整体结构和 vue 中 script 下的结构相同</li><li>作为逻辑的补充</li></ol><p>面试题： mixin 的逻辑混入方式,多个 mixin 之间存在冲突怎么办？ - mixin 后者覆盖前者,mixin 和主组件冲突都以主组件为主，生命周期的混入方式，优先 mixin 生命周期加载，按照顺序，最后是主组件 mixin 在引用顺序基础上加载生命周期,都在本体之前</p><p>为什么组件需要注册：方便进行条件查找渲染，但是在 vue3 中可以直接用 mixin 本质是注入型的逻辑块，仅仅是逻辑，相当于深拷贝</p><h3 id="继承拓展-extend-逻辑上的共同拓展" tabindex="-1">继承拓展 extend - 逻辑上的共同拓展 <a class="header-anchor" href="#继承拓展-extend-逻辑上的共同拓展" aria-label="Permalink to &quot;继承拓展 extend - 逻辑上的共同拓展&quot;">​</a></h3><p>使用 extends：直接加入，结构和 mixin 一样 应用：权限校验</p><ol><li><p>核心逻辑的功能继承,extends 只能一个 extends 部分的逻辑是最先执行 合并策略：变量补充维度 =&gt; 额外补充 生命周期： 无论业务代码还是 mixin 都在 extends 之后</p></li><li><p>全局的拓展 extend &amp; plugin</p></li></ol><p>vue.extend() vue.use(vuex)</p><p>上述这些都是在 vue2 中的，在 vue3 中都没有了，直接导出函数，导入函数进行使用就行 vue3 中只需要构造出一个钩子就行，摒弃了 vue2 中本身的语法等，以函数为主</p>`,26),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{g as __pageData,h as default};
